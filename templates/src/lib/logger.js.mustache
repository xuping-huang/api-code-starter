const path = require('path');
const fs = require('fs');
{{#dependencies.logger.need_morgan}}
const morgan = require('morgan')
{{/dependencies.logger.need_morgan}}
{{#dependencies.logger.need_bunyan}}
const bunyan = require('bunyan');
{{/dependencies.logger.need_bunyan}}

const config = require('../config/config');
/**
 * create logger direcotory
 */
const logDirectory = path.join(__dirname, config.logger.dirname);
if (!fs.existsSync(logDirectory)) fs.mkdirSync(logDirectory);
{{#dependencies.logger.need_morgan}}

module.exports = morgan('combined', {
  stream: fs.createWriteStream(path.join(logDirectory, '../../', config.logger.filename), {
    flags: 'a'
  })
})
{{/dependencies.logger.need_morgan}}
{{#dependencies.logger.need_bunyan}}

/**
 * @param {Object} config Logger configuration
 */
module.exports = config => {
  const bunyanConfig = [];
  const levels = Object.keys(config.levels);

  levels.forEach(level => {
    const bunyanLevel = config.levels[level];
    if (!bunyanLevel) return;

    if (level === 'debug' && config.level !== 'debug') return;

    const logger = {level};

    if (bunyanLevel === 'STDOUT') {
      logger.stream = process.stdout;
    } else if (bunyanLevel === 'STDERR') {
      logger.stream = process.stderr;
    } else if (bunyanLevel) {
      logger.path = bunyanLevel;
    } else {
      return;
    }

    bunyanConfig.push(logger);
  });

  return bunyan.createLogger({ name: config.name, streams: bunyanConfig });
};
{{/dependencies.logger.need_bunyan}}
