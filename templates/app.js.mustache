{{#projectStyle.db.isMongoDB}}
{{#dependencies.db.need_mongoose}}
const mongoose = require('mongoose');
const { inspect } = require('util');
{{/dependencies.db.need_mongoose}}
{{/projectStyle.db.isMongoDB}}

const { app } = require('./app-middleware');
const config = require('./src/config/config');
{{#apiStyle.log.needLog}}
const log = require('./src/lib/logger');
const logger = log(config.logger);
{{/apiStyle.log.needLog}}
{{#projectStyle.db.isMongoDB}}
{{#dependencies.db.need_mongoose}}

/**
 * Connect to MongoDB.
 */
mongoose.set('useFindAndModify', false);
mongoose.set('useCreateIndex', true);
mongoose.set('useNewUrlParser', true);
mongoose.connect(config.mongo.dblink, {
  keepAlive: 120
});
mongoose.connection.on('error', (err) => {
  {{#dependencies.logger.need_morgan}}
  console.error(err);
  console.log('MongoDB connection error. Please make sure MongoDB is running.');
  {{/dependencies.logger.need_morgan}}
  {{#dependencies.logger.need_bunyan}}
  logger.error(err);
  logger.info('MongoDB connection error. Please make sure MongoDB is running.');
  {{/dependencies.logger.need_bunyan}}
  process.exit();
});

// print mongoose logs in dev env
if (config.isDebug) {
  mongoose.set('debug', (collectionName, method, query, doc) => {
    debug(`${collectionName}.${method}`, inspect(query, false, 20), doc);
  });
}
{{/dependencies.db.need_mongoose}}
{{/projectStyle.db.isMongoDB}}
/**
 * Start server.
 */
app.listen(app.get('port'), () => {
  {{#dependencies.logger.need_morgan}}
  console.log('App is running at http://localhost:%d in %s mode', app.get('port'), app.get('env'));
  console.log('  Press CTRL-C to stop\n');
  {{/dependencies.logger.need_morgan}}
  {{#dependencies.logger.need_bunyan}}
  logger.info('App is running at http://localhost:%d in %s mode', app.get('port'), app.get('env'));
  logger.info('  Press CTRL-C to stop\n');
  {{/dependencies.logger.need_bunyan}}
});

module.exports = app;
