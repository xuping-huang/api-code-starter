{{^apiStyle.other.needJwt}}
// not implement, remove need
{{/apiStyle.other.needJwt}}
{{#apiStyle.other.needJwt}}
package com.{{project.name}}.app.lib.security;

import com.{{project.name}}.app.config.AppConfiguration;
import com.{{project.name}}.app.lib.utils.JwtHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class JwtAuthenticationTokenFilter extends OncePerRequestFilter {
    @Autowired
    private JwtUserDetailsServiceImpl userDetailsService;

    @Autowired
    private AppConfiguration appConfig;

    @Override
    protected void doFilterInternal(
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain chain) throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith(appConfig.getJwtHeader())) {
            final String authToken = JwtHelper.interceptToken(appConfig.getJwtHeader(), authHeader); // The part after "Bearer "
            String phone = JwtHelper.getPhone(authToken);

            if (phone != null && SecurityContextHolder.getContext().getAuthentication() == null) {

                UserDetails userDetails = this.userDetailsService.loadUserByUsername(phone);

                if (JwtHelper.verify(appConfig.getTokenSecret(), authToken, phone)) {
                    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                            userDetails, null, userDetails.getAuthorities());
                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(
                            request));
                    SecurityContextHolder.getContext().setAuthentication(authentication);
                }
            }
        }

        chain.doFilter(request, response);
    }
}
{{/apiStyle.other.needJwt}}
