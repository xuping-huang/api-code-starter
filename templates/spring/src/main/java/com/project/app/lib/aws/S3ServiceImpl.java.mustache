{{^projectStyle.other.needAws}}
// not implement, remove need
{{/projectStyle.other.needAws}}
{{#projectStyle.other.needAws}}
package com.{{project.name}}.app.lib.aws;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.*;
import com.{{project.name}}.app.config.S3Config;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

@Service
public class S3ServiceImpl implements S3Service {

    private static final Logger log = LoggerFactory.getLogger(S3ServiceImpl.class);

    @Autowired
    private S3Config s3Config;

    private AmazonS3 s3Client() {
        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(s3Config.getAccessKeyId(),
                s3Config.getSecretAccessKey());

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .withRegion(s3Config.getRegion())
                .build();

        return s3Client;
    }

    @Override
    public S3Object downloadFile(String keyName) {
        S3Object s3object = s3Client().getObject(new GetObjectRequest(s3Config.getBucket(), keyName));
        return s3object;
    }

    @Override
    public String uploadFile(String keyName, InputStream inputStream, long size) throws IOException {
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength(size);

        PutObjectResult result = s3Client().putObject(
            new PutObjectRequest(s3Config.getBucket(), keyName, inputStream, metadata)
        );
        return result.getETag();
    }

    @Override
    public void deleteObject(String keyName) {
        DeleteObjectRequest request = new DeleteObjectRequest(s3Config.getBucket(), keyName);

        s3Client().deleteObject(request);
    }

    @Override
    public ObjectMetadata getObjectMetadata(String keyName) {
        ObjectMetadata meta = s3Client().getObjectMetadata(s3Config.getBucket(), keyName);
        return meta;
    }
}
{{/projectStyle.other.needAws}}
