
const pagination = require('pagination')

function formatPageLink (req, page, lastEvaluatedKey) {
  let url = `${req.protocol}://${req.hostname}${req.originalUrl}`
  url = url.replace(/([^\w])page=\d+/gi, `$1page=${page}`)
  if (url.match(/([^\w])lastEvaluatedKey=[^&]*/gi)) {
    url = url.replace(/([^\w])lastEvaluatedKey=[^&]*/gi, '')
  }
  if (lastEvaluatedKey) {
    if (url.match(/\?/gi)) {
      url = url + `&lastEvaluatedKey=${JSON.stringify(lastEvaluatedKey)}`
    } else {
      url = url + `lastEvaluatedKey=${JSON.stringify(lastEvaluatedKey)}`
    }
  }
  return url
}

function formatLink (req, lastEvaluatedKey, current, pageCount) {
  let link = ''
  if (current === 1) {
    // first page
    if (current === pageCount) {
      // only one page
      link = ''
    } else {
      if (pageCount === 2) {
        link = `<${formatPageLink(req, current + 1, lastEvaluatedKey)}>; rel="next"`
      } else {
        link = `<${formatPageLink(req, current + 1, lastEvaluatedKey)}>; rel="next", <${formatPageLink(req, pageCount)}>; rel="last"`
      }
    }
  } else {
    if (current === pageCount) {
      // last page
      link = `<${formatPageLink(req, 1)}>; rel="first", <${formatPageLink(req, current - 1)}>; rel="prev"`
    } else {
      // mid page
      link = `<${formatPageLink(req, 1)}>; rel="first", <${formatPageLink(req, current - 1)}>; rel="prev", <${formatPageLink(req, current + 1, lastEvaluatedKey)}>; rel="next", <${formatPageLink(req, pageCount)}>; rel="last"`
    }
  }

  return link
}

exports.formatPagingData = function (req, data) {
  let page = data.Page
  if ((page - 1) * data.PerPage >= data.Total) {
    page = 1
  }
  const paginator = new pagination.SearchPaginator({
    prelink: '/',
    current: page,
    rowsPerPage: data.PerPage,
    totalResult: data.Total
  })

  const pageData = paginator.getPaginationData()

  return {
    Items: data.Items,
    Headers: {
      'X-Next-Page': pageData.next,
      'X-Page': pageData.current,
      'X-Per-Page': data.PerPage,
      'X-Prev-Page': pageData.previous,
      'X-Total': pageData.totalResult,
      'X-Total-Pages': pageData.pageCount,
      'Link': formatLink(req, data.LastEvaluatedKey, pageData.current, pageData.pageCount)
    }
  }
}
