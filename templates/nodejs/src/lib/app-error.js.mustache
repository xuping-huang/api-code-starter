/**
 * This file defines application errors
 */

const httpStatus = require('http-status')
const { Response } = require('../constants')
const util = require('util')

/**
 * Helper function to create generic error object with http status code
 * @param {String} name the error name
 * @param {String} message the default error message
 * @param {Number} statusCode the http status code
 * @returns {Function} the error constructor
 * @private
 */
function createError (name, message, statusCode) {
  /**
   * The error constructor
   * @param {String} message the error message
   * @param {String} [cause] the error cause
   * @constructor
   */
  function ErrorCtor (msg) {
    Error.call(this)
    Error.captureStackTrace(this)
    this.message = msg || message
    this.httpStatus = statusCode
  }

  util.inherits(ErrorCtor, Error)
  ErrorCtor.prototype.name = name
  return ErrorCtor
}

module.exports = {
  UnauthorizedError: createError('UnauthorizedError', Response.NotAuthorized, httpStatus.UNAUTHORIZED),
  ForbiddenError: createError('ForbiddenError', Response.Forbidden, httpStatus.FORBIDDEN),
  BadRequestError: createError('BadRequestError', Response.BadRequest, httpStatus.BAD_REQUEST),
  InternalServerError: createError('InternalServerError', Response.InternalServerError, httpStatus.INTERNAL_SERVER_ERROR),
  NotFoundError: createError('NotFoundError', Response.NotFound, httpStatus.NOT_FOUND),
  ConflictError: createError('ConflictError', Response.Conflict, httpStatus.CONFLICT)
}
