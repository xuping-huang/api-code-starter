{{#dependencies.other.http-status}}
const httpStatus = require('http-status')
{{/dependencies.other.http-status}}
{{#apiStyle.log.needLog}}
{{#dependencies.logger.bunyan}}
const logger = require('../lib/logger')
{{/dependencies.logger.bunyan}}
{{/apiStyle.log.needLog}}
const config = require('../config/config')

/**
 * Parent class for error
 * @extends Error
 */
class ExtendableError extends Error {
  /**
   * Init error
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message, status) {
    super(message)
    this.error = message
    this.name = this.constructor.name
    this.status = status
    Error.captureStackTrace(this, this.constructor.name)
  }
}

/**
 * Class representing an Internal Server error.
 * @extends ExtendableError
 */
class InternalServerError extends ExtendableError {
  /**
   * Creates an Internal Server error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message = config.response.err.internalServerError,
    httpCode = httpStatus.INTERNAL_SERVER_ERROR) {
    super(message, httpCode)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}

/**
 * Class representing an authenticate error.
 * @extends ExtendableError
 */
class AuthenticateError extends ExtendableError {
  /**
   * Creates an authenticate fail error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message = config.response.err.unauthenticated, httpCode = httpStatus.UNAUTHORIZED) {
    super(message, httpCode)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}

/**
 * Class representing a bad request error.
 * @extends ExtendableError
 */
class BadRequestError extends ExtendableError {
  /**
   * Creates an bad request error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message = config.response.err.badRequest, httpCode = httpStatus.BAD_REQUEST) {
    super(message, httpCode)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}

/**
 * Class representing a Joi validate error.
 * @extends ExtendableError
 */
class JoiError extends ExtendableError {
  /**
   * Creates an bad request error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (err) {
    super(err.message, httpStatus.BAD_REQUEST)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}

/**
 * Class representing a object not found error.
 * @extends ExtendableError
 */
class NotFoundError extends ExtendableError {
  /**
   * Creates an bad request error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message = config.response.err.notFound, httpCode = httpStatus.NOT_FOUND) {
    super(message, httpCode)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}
/**
 * Class representing a entity had exist error.
 * @extends ExtendableError
 */
class EntityExistError extends ExtendableError {
  /**
   * Creates an bad request error.
   * @param {string} message - error message
   * @param {integer} status - error status http code
   */
  constructor (message) {
    super(message, httpStatus.BAD_REQUEST)
    {{#apiStyle.log.needLog}}
    {{#dependencies.logger.bunyan}}
    logger.error(message)
    {{/dependencies.logger.bunyan}}
    {{/apiStyle.log.needLog}}
  }
}

module.exports = {
  AuthenticateError,
  BadRequestError,
  InternalServerError,
  NotFoundError,
  JoiError,
  EntityExistError
}
