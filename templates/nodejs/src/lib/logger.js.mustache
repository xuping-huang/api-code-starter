{{#dependencies.logger.winston}}
const { createLogger, transports } = require('winston')
{{/dependencies.logger.winston}}
{{#dependencies.logger.bunyan}}
const bunyan = require('bunyan')
{{/dependencies.logger.bunyan}}
const config = require('../config/config')
{{#dependencies.logger.winston}}

const logger = createLogger({
  transports: [
    new transports.Console({
      timestamp: true,
      level: config.logger.level,
      handleExceptions: true,
      json: true,
      colorize: true
    }),
    new transports.File({
      filename: config.logger.errorFile,
      dirname: config.logger.dirname,
      level: 'error',
      timestamp: true
    }),
    new transports.File({
      level: config.logger.level,
      filename: config.logger.filename,
      dirname: config.logger.dirname,
      maxsize: config.logger.size,
      timestamp: true
    })
  ],
  exitOnError: false
})

logger.stream = {
  write: function (message, encoding) {
    logger.info(message)
  }
}

module.exports = logger
{{/dependencies.logger.winston}}
{{#dependencies.logger.bunyan}}

/**
 * Return logger object
 * @param {Object} config - Logger configuration
 */
module.exports = (config) => {
  const bunyanConfig = []
  const levels = Object.keys(config.levels)

  levels.forEach((level) => {
    const bunyanLevel = config.levels[level]
    if (!bunyanLevel) return

    if (level === 'debug' && config.level !== 'debug') return

    const logger = { level }

    if (bunyanLevel === 'STDOUT') {
      logger.stream = process.stdout
    } else if (bunyanLevel === 'STDERR') {
      logger.stream = process.stderr
    } else if (bunyanLevel) {
      logger.path = bunyanLevel
    } else {
      return
    }

    bunyanConfig.push(logger)
  })

  return bunyan.createLogger({ name: config.name, streams: bunyanConfig })
}
{{/dependencies.logger.bunyan}}
