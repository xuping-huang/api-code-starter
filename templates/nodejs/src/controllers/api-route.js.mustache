{{#projectStyle.server.isExpress}}
const server = require('express')
{{/projectStyle.server.isExpress}}
{{#apiStyle.other.needJwt}}
{{#dependencies.express.express-jwt}}
const jwt = require('jsonwebtoken')
const expressJwt = require('express-jwt')
{{/dependencies.express.express-jwt}}
{{/apiStyle.other.needJwt}}

const config = require('../config/config')
{{#apiStyle.log.needLog}}
{{#dependencies.logger.bunyan}}
const logger = require('../lib/logger')
{{/dependencies.logger.bunyan}}
{{/apiStyle.log.needLog}}

const router = new server.Router()

{{#dependencies.other.swagger-jsdoc}}
/**
 * @swagger
 * /auth/login/{userId}:
 *   get:
 *     description: Return token for userid
 *     tags:
 *       - auth
 *     produces:
 *       - "application/json"
 *     parameters:
 *       - name: userId
 *         description: user id
 *         in: path
 *         required: true
 *         type: string
 *     responses:
 *       200:
 *         description: "successful operation"
 *       400:
 *         description: "Invalid ID supplied"
 */
{{/dependencies.other.swagger-jsdoc}}
{{^dependencies.other.swagger-jsdoc}}
/**
 * Return token for userid
 */
{{/dependencies.other.swagger-jsdoc}}
router.get('/auth/login/:userId', async (req, res, next) => {
  /** ignore validate because this api not in demand */
  const { userId } = req.params
  const { role } = req.query

  const token = jwt.sign({
    userId,
    role
  }, config.jwt.secretKey, {
    expiresIn: config.jwt.expired
  })
  return res.json({
    token,
    userId,
    role
  })
})

module.exports = router
