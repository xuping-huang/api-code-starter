class BaseModel {
  {{#projectStyle.db.isJsonDB}}
  /**
   * fill array property in model.
   * for complex types, type must be defined.
   * not support for complex types with subtypes
   */
  static fillModelArray (object, key, values, TypeClass = undefined) {
    if (values) {
      object[key] = []
      values.forEach((value) => {
        if (TypeClass) {
          object[key].push(new TypeClass(value))
        } else {
          object[key].push(value)
        }
      })
    }
  }

  /**
   * isInclude
   * @param target
   * @param search
   * @returns
   */
  static isInclude (target, search) {
    return target && target.toString().toLowerCase().includes(search)
  }
  {{/projectStyle.db.isJsonDB}}
  {{#projectStyle.db.isNeo4j}}
  /**
   * isNotFound
   */
  static isNotFound(neoResult) {
    const notFound = neoResult.records.length === 0
    return notFound
  }
  {{/projectStyle.db.isNeo4j}}
}

module.exports = BaseModel
