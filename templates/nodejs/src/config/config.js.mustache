/* eslint-disable no-process-env */
const Joi = require('joi')
const dotenv = require('dotenv')
/**
 * Use dotenv to load environment variables from '.env' file.
 * The '.env file not found' error is thrown only in development env.
 * Because in the product env, the variables will be set by other ways.
 *
 * NOTICE: In a production environment, you should inject
 * environment variables in a more secure way,
 * rather than through the .env file
 */
const result = dotenv.load()
if (result.error && process.env.NODE_ENV === 'development') {
  throw result.error
}

const JStrOptional = Joi.string().optional()
const JStrRequired = Joi.string().required()

// define validation for all the env vars
const envVarsSchema = Joi.object({
  NODE_ENV: Joi.string()
    .allow(['development', 'production', 'test', 'provision'])
    .default('development'),
  HOST: Joi.string().default('localhost'),
  PORT: Joi.number().default(8080),
  SECURE_PORT: Joi.number().default(443),
  IS_DEBUG: Joi.boolean()
    .when('NODE_ENV', {
      is: Joi.string().equal('development'),
      then: Joi.boolean().default(true),
      otherwise: Joi.boolean().default(false)
    }),
  {{#projectStyle.db.isDynamoDB}}
  AWS_DYNAMODB_REGION: JStrRequired,
  AWS_DYNAMODB_ENDPOINT: JStrOptional,
  {{/projectStyle.db.isDynamoDB}}
  {{#apiStyle.other.needJwt}}
  JWT_SECRET_KEY: JStrRequired,
  JWT_HEADER_NAME: JStrOptional.default('Authorization'),
  JWT_EXPIRED: JStrOptional.default('10d'),
  {{/apiStyle.other.needJwt}}
  {{#apiStyle.log.needLog}}
  {{#dependencies.logger.morgan}}
  LOGGER_DIR: JStrOptional.default('log'),
  LOGGER_FILE: JStrOptional.default('access.log'),
  LOGGER_INTERVAL: Joi.string().default('10d'),
  LOGGER_SIZE: Joi.string().default('100M'),
  LOGGER_COMPRESS_FORMAT: Joi.string().default('gzip'),
  {{/dependencies.logger.morgan}}
  {{#dependencies.logger.bunyan}}
  LOGGER_DIR: JStrOptional.default('log'),
  LOGGER_NAME: Joi.string().default('{{project.name}}'),
  LOGGER_LEVEL: Joi.string().default('debug'),
  LOGGER_LEVELS_TRACE: JStrOptional.allow(''),
  LOGGER_LEVELS_DEBUG: JStrOptional.default('STDOUT'),
  LOGGER_LEVELS_INFO: JStrOptional.allow(''),
  LOGGER_LEVELS_WARN: JStrOptional.allow(''),
  LOGGER_LEVELS_ERROR: JStrOptional.default('STDERR'),
  LOGGER_LEVELS_FATAL: JStrOptional.allow(''),
  {{/dependencies.logger.bunyan}}
  {{/apiStyle.log.needLog}}
  {{#projectStyle.db.isNeo4j}}
  {{#projectStyle.deploy.useDocker}}
  NEO4J_BOLT_URL: JStrRequired,
  NEO4J_BOLT_USER: JStrRequired,
  NEO4J_BOLT_PASSWORD: JStrRequired,
  {{/projectStyle.deploy.useDocker}}
  {{#projectStyle.deploy.useHeroku}}
  GRAPHENEDB_BOLT_URL: JStrRequired,
  GRAPHENEDB_BOLT_USER: JStrRequired,
  GRAPHENEDB_BOLT_PASSWORD: JStrRequired,
  {{/projectStyle.deploy.useHeroku}}
  {{/projectStyle.db.isNeo4j}}
  {{#projectStyle.db.isMongoDB}}
  MONGODB_URI: JStrRequired,
  {{/projectStyle.db.isMongoDB}}
  PAGE_PERPAGE_MAX: Joi.string().default(100),
  PAGE_PERPAGE_DEFAULT: Joi.string().default(20),
  RESPONSE_INTERNAL_SERVER_ERROR: JStrOptional.default('Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment.'),
  RESPONSE_FORBIDDEN: JStrOptional.default('You are not allowed to access the request.'),
  RESPONSE_UNAUTHENTICATED: JStrOptional.default('Unable to authenticate the user.'),
  RESPONSE_NOTFOUND: JStrOptional.default('A resource with the parameters could not be found.'),
  RESPONSE_BADREQUEST: JStrOptional.default('Invalid input.'),
  REQUEST_NO_CONTENT: JStrOptional.default('no content to update'),
  RESPONSE_ENTITY_PROTECTED: JStrOptional.default('Only admin or creator can update.')
}).unknown().required()

const {
  error,
  value: envVars
} = Joi.validate(process.env, envVarsSchema)
if (error) {
  throw new Error(`Config validation error: ${error.message}`)
}

const config = {
  env: envVars.NODE_ENV,
  host: envVars.HOST,
  port: envVars.PORT,
  securePort: envVars.SECURE_PORT,
  isDebug: envVars.IS_DEBUG,
  {{#apiStyle.other.needJwt}}
  jwt: {
    secretKey: envVars.JWT_SECRET_KEY,
    headerName: envVars.JWT_HEADER_NAME,
    expired: envVars.JWT_EXPIRED
  },
  {{/apiStyle.other.needJwt}}
  {{#apiStyle.log.needLog}}
  {{#dependencies.logger.morgan}}
  logger: {
    dirname: envVars.LOGGER_DIR,
    interval: envVars.LOGGER_INTERVAL,
    size: envVars.LOGGER_SIZE,
    compressFormat: envVars.LOGGER_COMPRESS_FORMAT,
    filename: envVars.LOGGER_FILE
  },
  {{/dependencies.logger.morgan}}
  {{#dependencies.logger.bunyan}}
  logger: {
    dirname: envVars.LOGGER_DIR,
    name: envVars.LOGGER_NAME,
    level: envVars.LOGGER_LEVEL,
    levels: {
      trace: envVars.LOGGER_LEVELS_TRACE,
      debug: envVars.LOGGER_LEVELS_DEBUG,
      info: envVars.LOGGER_LEVELS_INFO,
      warn: envVars.LOGGER_LEVELS_WARN,
      error: envVars.LOGGER_LEVELS_ERROR,
      fatal: envVars.LOGGER_LEVELS_FATAL,
    }
  },
  {{/dependencies.logger.bunyan}}
  {{/apiStyle.log.needLog}}
  db: {
    {{#projectStyle.db.isDynamoDB}}
    region: envVars.AWS_DYNAMODB_REGION,
    endpoint: envVars.AWS_DYNAMODB_ENDPOINT
    {{/projectStyle.db.isDynamoDB}}
    {{#projectStyle.db.isMongoDB}}
    url: envVars.MONGODB_URI
    {{/projectStyle.db.isMongoDB}}
    {{#projectStyle.db.isNeo4j}}
    {{#projectStyle.deploy.useDocker}}
    url: envVars.NEO4J_BOLT_URL,
    username: envVars.NEO4J_BOLT_USER,
    password: envVars.NEO4J_BOLT_PASSWORD,
    {{/projectStyle.deploy.useDocker}}
    {{#projectStyle.deploy.useHeroku}}
    url: envVars.GRAPHENEDB_BOLT_URL,
    username: envVars.GRAPHENEDB_BOLT_USER,
    password: envVars.GRAPHENEDB_BOLT_PASSWORD,
    {{/projectStyle.deploy.useHeroku}}
    {{/projectStyle.db.isNeo4j}}
  },
  page: {
    perPage: envVars.PAGE_PERPAGE_DEFAULT,
    perPageMax: envVars.PAGE_PERPAGE_MAX
  },
  response: {
    err: {
      internalServerError: envVars.RESPONSE_INTERNAL_SERVER_ERROR,
      forbidden: envVars.RESPONSE_FORBIDDEN,
      unauthenticated: envVars.RESPONSE_UNAUTHENTICATED,
      notFound: envVars.RESPONSE_NOTFOUND,
      badRequest: envVars.RESPONSE_BADREQUEST,
      noContent: envVars.REQUEST_NO_CONTENT,
      entityProtected: envVars.RESPONSE_ENTITY_PROTECTED
    }
  }
}

module.exports = config
