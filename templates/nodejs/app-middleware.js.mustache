{{#projectStyle.server.isExpress}}
const express = require('express')
{{#dependencies.express.express-status-monitor}}
const expressStatusMonitor = require('express-status-monitor')
{{/dependencies.express.express-status-monitor}}
{{#dependencies.express.compression}}
const compression = require('compression')
{{/dependencies.express.compression}}
{{#dependencies.express.body-parser}}
const bodyParser = require('body-parser')
{{/dependencies.express.body-parser}}
{{#dependencies.express.cors}}
const cors = require('cors')
{{/dependencies.express.cors}}
{{#dependencies.express.express-validator}}
const expressValidator = require('express-validator')
{{/dependencies.express.express-validator}}
{{#dependencies.other.http-status}}
const httpStatus = require('http-status')
{{/dependencies.other.http-status}}
{{#dependencies.express.helmet}}
const helmet = require('helmet')
{{/dependencies.express.helmet}}
{{#dependencies.other.error-handle}}
const devErrorHandler = require('errorhandler')
{{/dependencies.other.error-handle}}

const config = require('./src/config/config')
{{#apiStyle.log.needLog}}
{{#dependencies.logger.morgan}}
const logger = require('./src/lib/logger')
{{/dependencies.logger.morgan}}
{{/apiStyle.log.needLog}}
const { NotFoundError } = require('./src/lib/app-error')
{{#apiStyle.other.needErrorEmail}}
const errorHandler = require('./src/lib/error-handler')
{{/apiStyle.other.needErrorEmail}}
const router = require('./app-route')

const app = express()
{{#dependencies.express.express-status-monitor}}
// Monitor express running at http://host:port/status
app.use(expressStatusMonitor())
{{/dependencies.express.express-status-monitor}}
{{#dependencies.express.compression}}

// Comment it if choose ngnix to compress response.
app.use(compression())
{{/dependencies.express.compression}}
{{#dependencies.express.body-parser}}

// Create req.body in request object.
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({
  extended: true
}))
{{/dependencies.express.body-parser}}
{{#dependencies.express.helmet}}

// secure apps by setting various HTTP headers
app.use(helmet())
{{/dependencies.express.helmet}}
{{#dependencies.express.express-validator}}

/**
 * When validate fail, error response will like below:
  {
    "errors": [{
      "location": "body",
      "msg": "Invalid value",
      "param": "username"
    }]
  }
 */
app.use(expressValidator())
{{/dependencies.express.express-validator}}
{{#dependencies.express.cors}}

// enable CORS - Cross Origin Resource Sharing
app.use(cors())
{{/dependencies.express.cors}}

// Hide the technical details of the site implementation.
app.disable('x-powered-by')
{{#apiStyle.log.needLog}}

{{#dependencies.logger.morgan}}
app.use(logger)
{{/dependencies.logger.morgan}}
{{/apiStyle.log.needLog}}

// Mount all routes on a root path
app.use('', router)

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new NotFoundError('API not found')
  return next(err)
})

{{#dependencies.other.error-handle}}
// Error Handler.
if (config.isDebug) {
  app.use(devErrorHandler())
} else {
  app.use(async (err, req, res, next) => {
    {{#apiStyle.other.errorHandler}}
    await errorHandler.handleError(err)
    {{/apiStyle.other.errorHandler}}
    const status = err.status || httpStatus.INTERNAL_SERVER_ERROR
    res.status(status).send(err.message)
  })
}
{{/dependencies.other.error-handle}}
{{^dependencies.other.error-handle}}
app.use(async (err, req, res, next) => {
  {{#apiStyle.other.errorHandler}}
  await errorHandler.handleError(err)
  {{/apiStyle.other.errorHandler}}
  const status = err.status || httpStatus.INTERNAL_SERVER_ERROR
  res.status(status).send(err.message)
})
{{/dependencies.other.error-handle}}

exports.app = app
{{/projectStyle.server.isExpress}}
