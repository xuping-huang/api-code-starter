const express = require('express')
const config = require('./src/config/config')
const jwt = require('jsonwebtoken')
const expressJwt = require('express-jwt')
{{#dependencies.other.swagger-jsdoc}}
const swaggerJSDoc = require('swagger-jsdoc')
{{/dependencies.other.swagger-jsdoc}}

const router = express.Router() // eslint-disable-line new-cap
{{#dependencies.other.swagger-jsdoc}}

/**
 * Swagger-jsdoc
 */
const swaggerDefinition = {
  info: {
    // API informations (required)
    title: '{{project.name}}', // Title (required)
    version: '{{project.version}}', // Version (required)
    description: '{{project.description}}', // Description (optional)
  },
  host: `${config.host}:${config.port}`, // Host (optional)
  basePath: `${basePath}`, // Base path (optional)
}

// Options for the swagger docs
const options = {
  // Import swaggerDefinitions
  swaggerDefinition,
  // Path to the API docs
  // Note that this path is relative to the current directory from which the Node.js is ran,
  // not the application itself.
  apis: ['./app-route.js', './src/controllers/*.js', './src/models/*.js'],
}

/**
  * @swagger
  * tags:
  *   - name: auth
  *     description: 'Certification for request user'
  *   - name: user
  *     description: 'Request with user resource'
  */

// Initialize swagger-jsdoc -> returns validated swagger spec in json format
const swaggerSpec = swaggerJSDoc(options)

// Serve swagger docs the way you like (Recommendation: swagger-tools)
router.get('/swagger', (req, res) => {
  res.setHeader('Content-Type', 'application/json')
  res.send(swaggerSpec)
})
{{/dependencies.other.swagger-jsdoc}}


/**
 * Return token for userid
 */
router.get('/auth/login/:userId', async (req, res, next) => {
  /** ignore validate because this api just for test easily */
  const { userId } = req.params
  const { role } = req.query

  const token = jwt.sign({
    userId,
    role
  }, config.jwt.secretKey, {
    expiresIn: config.jwt.expired
  })
  return res.json({
    token,
    userId,
    role
  })
})

module.exports = router
