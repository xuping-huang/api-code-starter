/**
 * The application entry point
 */

require('./src/bootstrap')
const http = require('http')
const config = require('config')
const logger = require('./src/lib/logger')
{{#dependencies.secure.https}}
const https = require('https')
const fs = require('fs')
const options = {
  key: fs.readFileSync('cert/privatekey.pem'),
  cert: fs.readFileSync('cert/certificate.pem')
}
{{/dependencies.secure.https}}
{{#projectStyle.db.isMongoDB}}
{{#dependencies.db.mongoose}}
const mongoose = require('mongoose')
const { inspect } = require('util')
{{/dependencies.db.mongoose}}
{{/projectStyle.db.isMongoDB}}
const { app } = require('./app-middleware')
{{#projectStyle.db.isMongoDB}}
{{#dependencies.db.mongoose}}

/**
 * Connect to MongoDB.
 */
mongoose.set('useFindAndModify', false)
mongoose.set('useCreateIndex', true)
mongoose.set('useNewUrlParser', true)
mongoose.connect(config.db.url, {
  keepAlive: 120
})
mongoose.connection.on('error', (err) => {
  logger.error(err)
  logger.error('MongoDB connection error. Please make sure MongoDB is running.')
  process.exit()
})

// print mongoose logs in dev env
if (config.isDebug) {
  mongoose.set('debug', (collectionName, method, query, doc) => {
    debug(`${collectionName}.${method}`, inspect(query, false, 20), doc)
  })
}
{{/dependencies.db.mongoose}}
{{/projectStyle.db.isMongoDB}}

/**
 * Start server.
 */
http.createServer(app).listen(config.get('PORT'))
logger.info(`Server running on http://localhost:${config.get('PORT')}`)
{{#dependencies.secure.https}}
https.createServer(options, app).listen(config.get('SECURE_PORT'))
logger.info(`Secure Server running on https://localhost:${config.get('SECURE_PORT')}`)
{{/dependencies.secure.https}}
logger.info('  Press CTRL-C to stop\n')

module.exports = app
