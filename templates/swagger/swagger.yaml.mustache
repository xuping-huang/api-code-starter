swagger: '2.0'
info:
  version: 1.0.0
  title: {{project.name}}
  description: >
    ## Pagination

    - Requests that return multiple items will be paginated to 20 items by
    default.

    - You can specify further pages with the `page` parameter.

    - You can also set a custom page size up to 100 with the `perPage`
    parameter.

    - Pagination response data is included in http headers.

    - By default, the response header contains links with `next`, `last`,
    `first`, `prev` resource links.

    ## Access levels

    - Admin
basePath: {{{project.basePath}}}
schemes:
  - http
  - https
securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  {{#tags}}
  - name: {{name}}
  {{/tags}}
paths:
  {{#paths}}
  {{#isColonPath}}'{{/isColonPath}}{{{path}}}{{#isColonPath}}'{{/isColonPath}}:
    {{#ops}}
    {{method}}:
      summary: {{summary}}
      tags:
        - {{tag}}
      description: >
        {{#isPatch}}
        Only the fields that are provided in the body will be changed.
        {{/isPatch}}
        {{#isPut}}
        {{summary}}
        {{/isPut}}
        {{#isGet}}
        {{#isList}}
        {{summary}}
        {{/isList}}
        {{^isList}}
        {{summary}}
        {{/isList}}
        {{/isGet}}
        {{#isPost}}
        {{summary}}
        {{/isPost}}
        {{#isDelete}}
        {{summary}}
        {{/isDelete}}
      {{#noSecurity}}
      security: []
      {{/noSecurity}}
      {{^noSecurity}}
      security:
        - bearer: []
      {{/noSecurity}}
      produces:
        - application/json
      {{^isHead}}
      operationId: {{operationId}}
      {{/isHead}}
      {{#hasMethodParameters}}parameters:{{/hasMethodParameters}}
      {{#needNavPage}}
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
      {{/needNavPage}}
      {{#pathParams}}
        {{> urlprop}}
      {{/pathParams}}
      {{#queryParams}}
        {{> urlprop}}
      {{/queryParams}}
      {{#needReqBody}}
        - in: body
          name: body
          required: true
          {{#needReqBodyRef}}
          schema:
            {{#isArrayRefReqEntity}}
            type: array
            items:
              $ref: {{#refReqEntity}}'#/definitions/{{refReqEntity}}'{{/refReqEntity}}
            {{/isArrayRefReqEntity}}
            {{^isArrayRefReqEntity}}
            $ref: {{#refReqEntity}}'#/definitions/{{refReqEntity}}'{{/refReqEntity}}
            {{/isArrayRefReqEntity}}
          {{/needReqBodyRef}}
          {{^needReqBodyRef}}
          schema:
            type: object
            required:
              {{#reqBodyParams}}
              - {{name}}
              {{/reqBodyParams}}
            properties:
              {{#reqBodyParams}}
              {{> prop}}
              {{/reqBodyParams}}
          {{/needReqBodyRef}}
      {{/needReqBody}}
      responses:
        {{#noResponseContent}}
        {{#isDelete}}
        204:
        {{/isDelete}}
        {{^isDelete}}
        200:
        {{/isDelete}}
          description: The operation succeeded.
          {{#needResponsePageHeader}}
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The number of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
          {{/needResponsePageHeader}}
        {{/noResponseContent}}
        {{^noResponseContent}}
        {{#isPost}}201{{/isPost}}{{^isPost}}200{{/isPost}}:
          description: The operation succeeded.
          schema:
          {{#needResponseRef}}
            {{^isList}}
            $ref: {{#refResponseEntity}}'#/definitions/{{refResponseEntity}}'{{/refResponseEntity}}{{^refResponseEntity}}'#/definitions/{{opreationName}}Response'{{/refResponseEntity}}
            {{/isList}}
            {{#isList}}
            type: array
            items:
              $ref: {{#refResponseEntity}}'#/definitions/{{refResponseEntity}}'{{/refResponseEntity}}{{^refResponseEntity}}'#/definitions/{{opreationName}}Response'{{/refResponseEntity}}
            {{/isList}}
          {{/needResponseRef}}
          {{^needResponseRef}}
            {{^isList}}
            type: object
            properties:
              {{#responseParams}}
              {{> prop}}
              {{/responseParams}}
            {{/isList}}
            {{#isList}}
            type: array
            items:
              type: object
              properties:
                {{#responseParams}}
                {{> prop}}
                {{/responseParams}}
            {{/isList}}
          {{/needResponseRef}}
          {{#needResponsePageHeader}}
          headers:
            X-Next-Page:
              type: integer
              description: The index of the next page
            X-Page:
              type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              type: integer
              description: The number of items to list per page
            X-Prev-Page:
              type: integer
              description: The number of the previous page
            X-Total:
              type: integer
              description: The total number of items
            X-Total-Pages:
              type: integer
              description: The total number of pages
            Link:
              type: string
              description: Pagination link header.
          {{/needResponsePageHeader}}
        {{/noResponseContent}}
        400:
          $ref: '#/responses/BadRequest'
        {{#needAuth}}
        401:
          $ref: '#/responses/Unauthenticated'
        {{/needAuth}}
        {{#needPermission}}
        403:
          $ref: '#/responses/Forbidden'
        {{/needPermission}}
        {{#needFound}}
        404:
          $ref: '#/responses/NotFound'
        {{/needFound}}
        {{#needConflict}}
        409:
          $ref: '#/responses/Conflict'
        {{/needConflict}}
        500:
          $ref: '#/responses/InternalServerError'
    {{/ops}}
  {{/paths}}

responses:
  BadRequest:
    description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing).
    schema:
      $ref: '#/definitions/Error'
  Unauthenticated:
    description: UNAUTHENTICATED - if the request didn't bear authentication information or the authentication information is invalid.
    schema:
      $ref: '#/definitions/Error'
  Forbidden:
    description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation.
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: NOT FOUND - if the resource in request did not exist
    schema:
      $ref: '#/definitions/Error'
  InternalServerError:
    description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: CONFLICT - if the entity to be created conflicts with the uniqueness property of an entity that already exists in the table
    schema:
      $ref: "#/definitions/Error"

parameters:
  page:
    name: {{api.navigation.page}}
    in: query
    description: The page number.
    required: false
    type: integer
    format: int32
  perPage:
    name: {{api.navigation.perPage}}
    in: query
    description: The number of items to list per page.
    required: false
    type: integer
    format: int32

definitions:
  {{#api.entity.needId}}
  Id:
    type: string
    description: The id.
    example: 564935d6-16d5-4410-b415-55d369b90327
  {{/api.entity.needId}}
  {{#api.entity.needRecord}}
  Record:
    type: object
    properties:
      createdOn:
        type: string
        description: Date Created, ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ).
        format: date-time
      createdBy:
        type: string
        description: User ID of the creator
      updatedOn:
        type: string
        description: Last Update date, ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ).
        format: date-time
      updatedBy:
        type: string
        description: User ID of the last update
  {{/api.entity.needRecord}}
  Error:
    description: |
      An error entity.
    properties:
      message:
        type: string
        description: The error message.
  {{#schemas}}
  {{entity}}:
    {{^isRecord}}
    {{#isEnum}}
    type: string
    {{#description}}description: {{description}}{{/description}}
    enum: [{{#enums}}'{{value}}',{{/enums}}]
    {{/isEnum}}
    {{^isEnum}}
    type: object
    required:
      {{#entityParams}}
      {{^notRequired}}
      - {{name}}
      {{/notRequired}}
      {{/entityParams}}
    properties:
      {{#entityParams}}{{> prop}}{{/entityParams}}
    {{/isEnum}}
    {{/isRecord}}
    {{#isRecord}}
    type: object
    allOf:
      - type: object
        properties:
                                  id:
                                    $ref: '#/definitions/Id'
          {{#entityParams}}{{> prop}}{{/entityParams}}
      {{#api.entity.needRecord}}
      - $ref: '#/definitions/Record'
      {{/api.entity.needRecord}}
      - $ref: '#/definitions/{{returnRef}}'
    {{/isRecord}}
  {{/schemas}}
