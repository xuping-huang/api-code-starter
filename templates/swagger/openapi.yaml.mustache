openapi: "3.0.0"
info:
  title: {{project.name}}
  version: "1.0"
servers:
- url: {{{project.basePath}}}
security:
{{#api.security.isJwt}}
- bearerAuth: []
{{/api.security.isJwt}}
tags:
  {{#tags}}
  - name: {{name}}
  {{/tags}}
paths:
  {{#paths}}
  {{#isColonPath}}'{{/isColonPath}}{{{path}}}{{#isColonPath}}'{{/isColonPath}}:
    {{#ops}}
    {{method}}:
      summary: {{summary}}
      tags:
        - {{tag}}
      description: >
        {{#isPatch}}
        Only the fields that are provided in the body will be changed.
        {{/isPatch}}
        {{#isPut}}
        Update the {{refResponseEntity}} with the provided id.
        {{/isPut}}
        {{#isGet}}
        {{#isList}}
        Retrieve {{refResponseEntity}}s in the system.
        {{/isList}}
        {{^isList}}
        Retrieve the {{refResponseEntity}} with provided id.
        {{/isList}}
        {{/isGet}}
        {{#isPost}}
        Create a new {{refResponseEntity}} in the system.
        {{/isPost}}
        {{#isDelete}}
        Delete the {{tag}} with the provided id.
        {{/isDelete}}
      {{#noSecurity}}
      security: []
      {{/noSecurity}}
      {{#hasMethodParametersFor30}}parameters:{{/hasMethodParametersFor30}}
      {{#needNavPage}}
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      {{/needNavPage}}
      {{#pathParams}}
        {{> urlparam}}
      {{/pathParams}}
      {{#queryParams}}
        {{> urlparam}}
      {{/queryParams}}
      {{#needReqBody}}
      requestBody:
        {{#needReqBodyRef}}
        content:
          application/json:
            schema:
              {{#isArrayRefReqEntity}}
              type: array
              items:
                $ref: {{#refReqEntity}}'#/components/schemas/{{refReqEntity}}'{{/refReqEntity}}
              {{/isArrayRefReqEntity}}
              {{^isArrayRefReqEntity}}
              $ref: {{#refReqEntity}}'#/components/schemas/{{refReqEntity}}'{{/refReqEntity}}
              {{/isArrayRefReqEntity}}
        {{/needReqBodyRef}}
        {{^needReqBodyRef}}
        content:
          application/json:
            schema:
              type: object
              required:
                {{#reqBodyParams}}
                - {{name}}
                {{/reqBodyParams}}
              properties:
                {{#reqBodyParams}}
                {{> param}}
                {{/reqBodyParams}}
        {{/needReqBodyRef}}
      {{/needReqBody}}
      responses:
        {{#noResponseContent}}
        204:
          description: Successfully {{operationName}}.
        {{/noResponseContent}}
        {{^noResponseContent}}
        {{#isPost}}201{{/isPost}}{{^isPost}}200{{/isPost}}:
          description: The operation succeeded.
          {{#needResponseRef}}
          content:
            application/json:
              schema:
                {{^isList}}
                $ref: {{#refResponseEntity}}'#/components/schemas/{{refResponseEntity}}'{{/refResponseEntity}}{{^refResponseEntity}}'#/components/responses/{{opreationName}}Response'{{/refResponseEntity}}
                {{/isList}}
                {{#isList}}
                type: array
                items:
                  $ref: {{#refResponseEntity}}'#/components/schemas/{{refResponseEntity}}'{{/refResponseEntity}}{{^refResponseEntity}}'#/components/responses/{{opreationName}}Response'{{/refResponseEntity}}
                {{/isList}}
          {{/needResponseRef}}
          {{^needResponseRef}}
          content:
            application/json:
              schema:
                {{^isList}}
                type: object
                properties:
                  {{#responseParams}}
                  {{> param}}
                  {{/responseParams}}
                {{/isList}}
                {{#isList}}
                type: array
                items:
                  type: object
                  properties:
                    {{#responseParams}}
                    {{> param}}
                    {{/responseParams}}
                {{/isList}}
          {{#needResponsePageHeader}}
          headers:
            X-Next-Page:
              schema:
                type: integer
              description: The index of the next page
            X-Page:
              schema:
                type: integer
              description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
              description: The number of items to list per page
            X-Total:
              schema:
                type: integer
              description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
              description: The total number of pages
            Link:
              schema:
                type: string
              description: Pagination link header
          {{/needResponsePageHeader}}
          {{/needResponseRef}}
        {{/noResponseContent}}
        400:
          $ref: '#/components/responses/BadRequest'
        {{#needAuth}}
        401:
          $ref: '#/components/responses/Unauthenticated'
        {{/needAuth}}
        {{#needPermission}}
        403:
          $ref: '#/components/responses/Forbidden'
        {{/needPermission}}
        {{#needFound}}
        404:
          $ref: '#/components/responses/NotFound'
        {{/needFound}}
        {{#needConflict}}
        409:
          $ref: '#/components/responses/Conflict'
        {{/needConflict}}
        500:
          $ref: '#/components/responses/InternalServerError'
    {{/ops}}
  {{/paths}}

components:
  {{#api.security.isJwt}}
  #-------------------------------
  # JWT Security schemes
  #-------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  {{/api.security.isJwt}}

  #-------------------------------
  # Parameters
  #-------------------------------
  parameters:
    page:
      name: {{api.navigation.page}}
      in: query
      description: The page number.
      required: false
      schema:
        type: integer
        default: 1
    perPage:
      name: {{api.navigation.perPage}}
      in: query
      description: The number of items to list per page.
      required: false
      schema:
        type: integer
        default: 20
        maximum: 100

  #-------------------------------
  # Responses
  #-------------------------------
  responses:
    BadRequest:
      description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthenticated:
      description: UNAUTHENTICATED - if the request didn't bear authentication information or the authentication information is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: NOT FOUND - if the resource in request did not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: CONFLICT - if the entity to be created conflicts with the uniqueness property of an entity that already exists in the table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    {{#responses}}
    {{entity}}:
      description: {{entity}} response
      content:
        application/json:
          schema:
            type: object
            properties:
              {{#entityParams}}
              {{> param}}
              {{/entityParams}}
      {{#needResponsePageHeader}}
      headers:
        X-Next-Page:
          schema:
            type: integer
          description: The index of the next page
        X-Page:
          schema:
            type: integer
          description: The index of the current page (starting at 1)
        X-Per-Page:
          schema:
            type: integer
          description: The number of items to list per page
        X-Total:
          schema:
            type: integer
          description: The total number of items
        X-Total-Pages:
          schema:
            type: integer
          description: The total number of pages
        Link:
          schema:
            type: string
          description: Pagination link header
      {{/needResponsePageHeader}}
    {{/responses}}
  #-------------------------------
  # Request Bodies
  #-------------------------------
  {{#requestBodies}}requestBodies:{{/requestBodies}}
    {{#requestBodies}}
    {{entity}}:
      description: {{entity}} request body
      content:
        application/json:
          schema:
            type: object
            required:
              {{#entityParams}}
              - {{name}}
              {{/entityParams}}
            properties:
              {{#entityParams}}
              {{> param}}
              {{/entityParams}}
    {{/requestBodies}}
  #-------------------------------
  # Entities
  #-------------------------------
  schemas:
    {{#api.entity.needId}}
    Id:
      type: string
      description: The id.
      example: 564935d6-16d5-4410-b415-55d369b90327
    {{/api.entity.needId}}
    TrueFalseSign:
      type: string
      enum: ['Y', 'N']
    {{#api.entity.needRecord}}
    Record:
      type: object
      properties:
        createdOn:
          type: string
          description: Date Created, ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ).
          format: date-time
        createdBy:
          type: string
          description: User ID of the creator
        updatedOn:
          type: string
          description: Last Update date, ISO-8601 formatted date times (YYYY-MM-DDTHH:mm:ss.sssZ).
          format: date-time
        updatedBy:
          type: string
          description: User ID of the last update
    {{/api.entity.needRecord}}
    Error:
      description: |
        An error entity.
      properties:
        message:
          type: string
          description: The error message.
    {{#schemas}}
    {{entity}}:
      {{^isRecord}}
      {{#isEnum}}
      type: string
      {{#description}}description: {{description}}{{/description}}
      enum: [{{#enums}}'{{value}}',{{/enums}}]
      {{/isEnum}}
      {{^isEnum}}
      type: object
      required:
        {{#entityParams}}
        {{^notRequired}}
        - {{name}}
        {{/notRequired}}
        {{/entityParams}}
      properties:
        {{#entityParams}}{{> param}}{{/entityParams}}
      {{/isEnum}}
      {{/isRecord}}
      {{#isRecord}}
      type: object
      allOf:
        - type: object
          properties:
                                    id:
                                      $ref: '#/components/schemas/Id'
            {{#entityParams}}{{> param}}{{/entityParams}}
        {{#api.entity.needRecord}}
        - $ref: '#/components/schemas/Record'
        {{/api.entity.needRecord}}
        - $ref: '#/components/schemas/{{returnRef}}'
      {{/isRecord}}
    {{/schemas}}
